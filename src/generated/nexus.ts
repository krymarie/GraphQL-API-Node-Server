/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ClientCreateInput: { // input type
    content: string; // String!
    createdAt?: any | null; // DateTime
    id?: string | null; // String
    interestLevel: string; // String!
    name: string; // String!
    phone: string; // String!
    updatedAt?: any | null; // DateTime
  }
  ClientUpdateInput: { // input type
    content?: string | null; // String
    createdAt?: any | null; // DateTime
    id?: string | null; // String
    interestLevel?: string | null; // String
    name?: string | null; // String
    phone?: string | null; // String
    updatedAt?: any | null; // DateTime
  }
  ClientWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Client: prisma.Client;
  Mutation: {};
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ClientCreateInput: NexusGenInputs['ClientCreateInput'];
  ClientUpdateInput: NexusGenInputs['ClientUpdateInput'];
  ClientWhereUniqueInput: NexusGenInputs['ClientWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Client: { // field return type
    content: string; // String!
    createdAt: any; // DateTime!
    id: string; // String!
    interestLevel: string; // String!
    name: string; // String!
    phone: string; // String!
    updatedAt: any; // DateTime!
  }
  Mutation: { // field return type
    createOneClient: NexusGenRootTypes['Client']; // Client!
    deleteOneClient: NexusGenRootTypes['Client'] | null; // Client
    updateOneClient: NexusGenRootTypes['Client'] | null; // Client
  }
  Query: { // field return type
    Client: NexusGenRootTypes['Client'] | null; // Client
    Clients: NexusGenRootTypes['Client'][]; // [Client!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneClient: { // args
      data: NexusGenInputs['ClientCreateInput']; // ClientCreateInput!
    }
    deleteOneClient: { // args
      where: NexusGenInputs['ClientWhereUniqueInput']; // ClientWhereUniqueInput!
    }
    updateOneClient: { // args
      data: NexusGenInputs['ClientUpdateInput']; // ClientUpdateInput!
      where: NexusGenInputs['ClientWhereUniqueInput']; // ClientWhereUniqueInput!
    }
  }
  Query: {
    Client: { // args
      id?: string | null; // ID
    }
    Clients: { // args
      searchString?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Client" | "Mutation" | "Query";

export type NexusGenInputNames = "ClientCreateInput" | "ClientUpdateInput" | "ClientWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}